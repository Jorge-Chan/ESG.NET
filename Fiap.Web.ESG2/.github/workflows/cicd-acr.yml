name: CI/CD - ACR → Azure Web App

on:
  push:
    branches: [ "main" ]
    tags:
      - "prod-*"
  workflow_dispatch:
    inputs:
      target:
        description: "Ambiente alvo (staging|prod)"
        required: true
        default: "staging"

env:
  ACR_NAME: esgregistry2
  ACR_LOGIN_SERVER: esgregistry2.azurecr.io
  IMAGE_REPO: fiap-web-esg2
  DOTNET_VERSION: "8.0.x"

permissions:
  contents: read
  packages: write
  id-token: write

jobs:
  ci:
    name: Build & Test (.NET) + Push ACR
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: ${{ env.DOTNET_VERSION }}

      - name: Restore
        run: dotnet restore

      - name: Build
        run: dotnet build --configuration Release --no-restore

      - name: Test
        run: dotnet test --configuration Release --no-build --verbosity normal

      - name: Extract short SHA
        id: vars
        run: echo "short_sha=${GITHUB_SHA::7}" >> $GITHUB_OUTPUT

      - name: Define image tags
        id: tags
        run: |
          echo "commit_tag=${{ env.ACR_LOGIN_SERVER }}/${{ env.IMAGE_REPO }}:${{ steps.vars.outputs.short_sha }}" >> $GITHUB_OUTPUT
          echo "latest_tag=${{ env.ACR_LOGIN_SERVER }}/${{ env.IMAGE_REPO }}:latest" >> $GITHUB_OUTPUT
          echo "prod_tag=${{ env.ACR_LOGIN_SERVER }}/${{ env.IMAGE_REPO }}:prod" >> $GITHUB_OUTPUT

      # 🔎 Debug para ver onde está o Dockerfile
      - name: Debug - listar arquivos
        run: |
          pwd
          ls -la
          echo "---- até 3 níveis ----"
          find . -maxdepth 3 -type f -iname "*dockerfile*" -print

      # 🔧 Detecta automaticamente o caminho do Dockerfile e do contexto
      - name: Detect Dockerfile path
        id: dpath
        shell: bash
        run: |
          if [ -f "./Dockerfile" ]; then
            echo "context=." >> $GITHUB_OUTPUT
            echo "file=./Dockerfile" >> $GITHUB_OUTPUT
          elif [ -f "./Fiap.Web.ESG2/Dockerfile" ]; then
            echo "context=./Fiap.Web.ESG2" >> $GITHUB_OUTPUT
            echo "file=./Fiap.Web.ESG2/Dockerfile" >> $GITHUB_OUTPUT
          else
            echo "Nenhum Dockerfile encontrado nos caminhos esperados." >&2
            exit 1
          fi

      - name: Azure login (Service Principal)
        uses: azure/login@v2
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: ACR login
        run: az acr login --name ${{ env.ACR_NAME }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build & Push to ACR (commit + latest)
        uses: docker/build-push-action@v6
        with:
          context: ${{ steps.dpath.outputs.context }}
          file: ${{ steps.dpath.outputs.file }}
          push: true
          tags: |
            ${{ steps.tags.outputs.commit_tag }}
            ${{ steps.tags.outputs.latest_tag }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

    outputs:
      commit_tag: ${{ steps.tags.outputs.commit_tag }}
      latest_tag: ${{ steps.tags.outputs.latest_tag }}
      prod_tag: ${{ steps.tags.outputs.prod_tag }}

  deploy_staging:
    name: Deploy STAGING (Web App for Containers)
    needs: [ci]
    runs-on: ubuntu-latest
    if: |
      (github.event_name == 'push' && github.ref == 'refs/heads/main') ||
      (github.event_name == 'workflow_dispatch' && inputs.target == 'staging')

    steps:
      - name: Azure login
        uses: azure/login@v2
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Deploy to Azure Web App (Staging)
        uses: azure/webapps-deploy@v3
        with:
          app-name: ${{ secrets.AZURE_WEBAPP_NAME_STG }}
          images: ${{ needs.ci.outputs.commit_tag }}

  deploy_prod:
    name: Deploy PROD (Web App for Containers)
    needs: [ci]
    runs-on: ubuntu-latest
    if: |
      (github.event_name == 'push' && startsWith(github.ref, 'refs/tags/prod-')) ||
      (github.event_name == 'workflow_dispatch' && inputs.target == 'prod')

    steps:
      - name: Azure login
        uses: azure/login@v2
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Retag commit as :prod in ACR
        run: |
          az acr login --name ${{ env.ACR_NAME }}
          docker pull ${{ needs.ci.outputs.commit_tag }}
          docker tag  ${{ needs.ci.outputs.commit_tag }}  ${{ needs.ci.outputs.prod_tag }}
          docker push ${{ needs.ci.outputs.prod_tag }}

      - name: Deploy to Azure Web App (Prod)
        uses: azure/webapps-deploy@v3
        with:
          app-name: ${{ secrets.AZURE_WEBAPP_NAME_PRD }}
          images: ${{ needs.ci.outputs.prod_tag }}
