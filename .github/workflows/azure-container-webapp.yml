name: CI/CD - ACR → Azure Web App (staging/prod por branch)

on:
  push:
    branches: [ "staging", "prod" ]
  workflow_dispatch:
    inputs:
      target:
        description: "Ambiente alvo (staging|prod)"
        required: true
        default: "staging"

env:
  ACR_NAME: esgregistry2
  ACR_LOGIN_SERVER: esgregistry2.azurecr.io
  IMAGE_REPO: fiap-web-esg2
  NUGET_PACKAGES: ${{ github.workspace }}/.nuget/packages
  DOTNET_CLI_HOME: ${{ github.workspace }}/.dotnet
  XDG_CONFIG_HOME: ${{ github.workspace }}/.config
  XDG_DATA_HOME: ${{ github.workspace }}/.local/share
  HOME: ${{ github.workspace }}   # evita ~/.nuget do runner

permissions:
  contents: read
  packages: write
  id-token: write

jobs:
  ci:
    name: Build & Test (.NET) + Push ACR
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      # Instala .NET 8 (sem global.json)
      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: 8.0.x

      - name: Cache NuGet
        uses: actions/cache@v4
        with:
          path: ${{ env.NUGET_PACKAGES }}
          key: ${{ runner.os }}-nuget-${{ hashFiles('**/*.csproj') }}
          restore-keys: |
            ${{ runner.os }}-nuget-

      - name: Assert workflow identity
        run: |
          echo "GITHUB_WORKFLOW_REF=$GITHUB_WORKFLOW_REF"
          echo "WORKFLOW NAME=$GITHUB_WORKFLOW"

      - name: Diagnóstico de ambiente
        run: |
          echo "HOME=$HOME"
          echo "NUGET_PACKAGES=$NUGET_PACKAGES"
          echo "DOTNET_CLI_HOME=$DOTNET_CLI_HOME"
          dotnet --info
          echo "=== NuGet locals ==="
          dotnet nuget locals all -l || true
          echo "=== NuGet.Config no repo ==="
          find . -iname "NuGet.Config" -o -iname "nuget.config" -print

      # RESTORE com config inline (sem /root) e 3 camadas de override
      - name: Restore (forçando pasta de pacotes)
        env:
          SLN_PATH: ESG.NET/ESG.NET/Fiap.Web.ESG2.sln
        run: |
          mkdir -p "$NUGET_PACKAGES"
          cat > ./NuGet.inline.config <<'XML'
          <?xml version="1.0" encoding="utf-8"?>
          <configuration>
            <packageSources>
              <clear />
              <add key="nuget" value="https://api.nuget.org/v3/index.json" />
            </packageSources>
            <fallbackPackageFolders>
              <clear />
            </fallbackPackageFolders>
            <!-- sem globalPackagesFolder -->
          </configuration>
          XML

          echo "NUGET_PACKAGES=$NUGET_PACKAGES"
          dotnet restore "$SLN_PATH" \
            --configfile ./NuGet.inline.config \
            --packages "$NUGET_PACKAGES" \
            -p:RestorePackagesPath="$NUGET_PACKAGES" \
            --verbosity minimal

      - name: Build
        env:
          SLN_PATH: ESG.NET/ESG.NET/Fiap.Web.ESG2.sln
        run: |
          dotnet build "$SLN_PATH" \
            --configuration Release \
            --no-restore \
            -p:RestorePackagesPath="$NUGET_PACKAGES"

      - name: Test
        env:
          SLN_PATH: ESG.NET/ESG.NET/Fiap.Web.ESG2.sln
        run: |
          dotnet test "$SLN_PATH" \
            --configuration Release \
            --no-build \
            -p:RestorePackagesPath="$NUGET_PACKAGES" \
            --verbosity normal

      - name: Extract short SHA
        id: vars
        run: echo "short_sha=${GITHUB_SHA::7}" >> $GITHUB_OUTPUT

      - name: Define image tags
        id: tags
        run: |
          echo "commit_tag=${{ env.ACR_LOGIN_SERVER }}/${{ env.IMAGE_REPO }}:${{ steps.vars.outputs.short_sha }}" >> $GITHUB_OUTPUT
          echo "latest_tag=${{ env.ACR_LOGIN_SERVER }}/${{ env.IMAGE_REPO }}:latest" >> $GITHUB_OUTPUT
          echo "prod_tag=${{ env.ACR_LOGIN_SERVER }}/${{ env.IMAGE_REPO }}:prod" >> $GITHUB_OUTPUT

      - name: Debug - listar arquivos
        run: |
          pwd
          ls -la
          echo "---- até 3 níveis ----"
          find . -maxdepth 3 -type f -iname "*dockerfile*" -print

      - name: Detect Dockerfile path
        id: dpath
        shell: bash
        run: |
          if [ -f "./Dockerfile" ]; then
            echo "context=." >> $GITHUB_OUTPUT
            echo "file=./Dockerfile" >> $GITHUB_OUTPUT
          elif [ -f "./Fiap.Web.ESG2/Dockerfile" ]; then
            echo "context=./Fiap.Web.ESG2" >> $GITHUB_OUTPUT
            echo "file=./Fiap.Web.ESG2/Dockerfile" >> $GITHUB_OUTPUT
          else
            echo "Nenhum Dockerfile encontrado nos caminhos esperados." >&2
            exit 1
          fi

      - name: Azure login (Service Principal)
        uses: azure/login@v2
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: ACR login
        run: az acr login --name ${{ env.ACR_NAME }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build & Push to ACR (commit + latest)
        uses: docker/build-push-action@v6
        with:
          context: ${{ steps.dpath.outputs.context }}
          file: ${{ steps.dpath.outputs.file }}
          push: true
          tags: |
            ${{ steps.tags.outputs.commit_tag }}
            ${{ steps.tags.outputs.latest_tag }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

    outputs:
      commit_tag: ${{ steps.tags.outputs.commit_tag }}
      latest_tag: ${{ steps.tags.outputs.latest_tag }}
      prod_tag: ${{ steps.tags.outputs.prod_tag }}

  deploy_staging:
    name: Deploy STAGING
    needs: [ci]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/staging' || (github.event_name == 'workflow_dispatch' && inputs.target == 'staging')
    steps:
      - name: Azure login
        uses: azure/login@v2
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Deploy to Azure Web App (Staging)
        uses: azure/webapps-deploy@v3
        with:
          app-name: ${{ secrets.AZURE_WEBAPP_NAME_STG }}
          images: ${{ needs.ci.outputs.commit_tag }}

  deploy_prod:
    name: Deploy PROD
    needs: [ci]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/prod' || (github.event_name == 'workflow_dispatch' && inputs.target == 'prod')
    steps:
      - name: Azure login
        uses: azure/login@v2
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Retag commit as :prod in ACR
        run: |
          az acr login --name ${{ env.ACR_NAME }}
          docker pull ${{ needs.ci.outputs.commit_tag }}
          docker tag  ${{ needs.ci.outputs.commit_tag }}  ${{ needs.ci.outputs.prod_tag }}
          docker push ${{ needs.ci.outputs.prod_tag }}

      - name: Deploy to Azure Web App (Prod)
        uses: azure/webapps-deploy@v3
        with:
          app-name: ${{ secrets.AZURE_WEBAPP_NAME_PRD }}
          images: ${{ needs.ci.outputs.prod_tag }}
